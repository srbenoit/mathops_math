package dev.mathops.math.linalg;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Tests for the SquareMatrix class.
 */
final class TestSquareMatrix {

    /** A small number used to compare results. */
    private static final double EPSILON = 0.000000000001;

    /** A small number used to compare results. */
    private static final double EPSILON2 = 0.0000001;

    /**
     * Constructs a new {@code TestSquareMatrix}.
     */
    TestSquareMatrix() {

        // No action
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Determinant of 1x1")
    void testDeterminant1() {

        final SquareMatrix test = new SquareMatrix(17.5);

        final double det = test.determinant();

        assertEquals(17.5, det, "Invalid determinant of 1x1 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Determinant of 2x2")
    void testDeterminant2() {

        final SquareMatrix test = new SquareMatrix(17.5, -12.4, 6.5, 3.2);

        final double det = test.determinant();

        // Wolfram alpha "det {{17.5, -12.4},{6.5, 3.2}}"
        assertEquals(136.6, det, EPSILON, "Invalid determinant of 2x2 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Determinant of 3x3")
    void testDeterminant3() {

        final SquareMatrix test = new SquareMatrix(17.5, -12.4, 9.1, 6.5, 3.2, -4.4, 1.9, -8.1, 15.4);

        final double det = test.determinant();

        // Wolfram alpha "det {{17.5, -12.4, 9.1},{6.5, 3.2, -4.4},{1.9, -8.1, 15.4}}"
        assertEquals(1049.161, det, EPSILON, "Invalid determinant of 3x3 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Determinant of 4x4")
    void testDeterminant4() {

        final SquareMatrix test1 = new SquareMatrix(
                0.0597058, 0.362764, 0.529353, 0.743410,
                0.0644189, 0.372940, 0.980050, 0.388748,
                0.8040580, 0.602346, 0.402664, 0.595672,
                0.5029760, 0.120310, 0.782990, 0.555785);

        final double det1 = test1.determinant();

        // Random matrix generated by Wolfram alpha, determinant found with MATLAB
        assertEquals(0.172673723499389, det1, EPSILON, "Invalid determinant of 4x4 matrix.");

        final SquareMatrix test2 = new SquareMatrix(
                0.896248, 0.230188, 0.687667, 0.966587,
                0.872015, 0.498319, 0.900730, 0.598575,
                0.544349, 0.887507, 0.651091, 0.807526,
                0.139408, 0.841727, 0.799754, 0.151275);

        final double det2 = test2.determinant();

        // Random matrix generated by Wolfram alpha, determinant found with MATLAB
        assertEquals(-0.101832948742812, det2, EPSILON, "Invalid determinant of 4x4 matrix.");

        final SquareMatrix test3 = new SquareMatrix(
                6.71406, 4.485290, 7.47972, 4.0236,
                2.60437, 8.002670, 9.81286, 1.58299,
                2.70144, 0.424962, 9.87810, 4.64747,
                3.88575, 8.418200, 7.03397, 8.30964);

        final double det3 = test3.determinant();

        // Random matrix generated by Wolfram alpha, determinant found with MATLAB
        assertEquals(2577.587267065266, det3, EPSILON, "Invalid determinant of 4x4 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Determinant of 10x10")
    void testDeterminant5() {

        final SquareMatrix test = new SquareMatrix(
                0.679907, 0.484257, 0.278555, 0.368329, 0.340532, 0.203652, 0.9462450, 0.2980480, 0.2384980, 0.9495700,
                0.658759, 0.796218, 0.457899, 0.104089, 0.476250, 0.167054, 0.4381900, 0.9569980, 0.7140110, 0.8149000,
                0.565297, 0.546658, 0.678315, 0.142485, 0.306676, 0.503536, 0.9168440, 0.6665350, 0.1443680, 0.3102970,
                0.840636, 0.113913, 0.541133, 0.402995, 0.343223, 0.392272, 0.4913240, 0.5704140, 0.1174820, 0.4048290,
                0.742019, 0.175687, 0.411406, 0.539525, 0.410085, 0.686180, 0.2139510, 0.5030780, 0.9936040, 0.7026920,
                0.495777, 0.416156, 0.639746, 0.455169, 0.528963, 0.699501, 0.6784500, 0.0216322, 0.6007570, 0.3136930,
                0.496401, 0.889872, 0.995780, 0.142381, 0.946278, 0.795033, 0.0296139, 0.4571320, 0.4784280, 0.3970320,
                0.925874, 0.118995, 0.232438, 0.286745, 0.195767, 0.632609, 0.9598510, 0.9420150, 0.0744246, 0.2023470,
                0.797212, 0.518764, 0.324527, 0.153161, 0.478742, 0.123190, 0.8362220, 0.7866780, 0.6889380, 0.4392460,
                0.704471, 0.744936, 0.939563, 0.923221, 0.113476, 0.593990, 0.2248800, 0.6873640, 0.5404410, 0.0217125);

        final double det = test.determinant();

        // Random matrix generated by Wolfram alpha, determinant found with MATLAB
        assertEquals(-0.001447354993894, det, EPSILON, "Invalid determinant of 10x10 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Inverse of 1x1")
    void testInverse1() {

        final SquareMatrix test = new SquareMatrix(17.5);

        final Optional<SquareMatrix> inv = test.inverse();

        final boolean found = inv.isPresent();
        assertTrue(found, "Failed to take inverse of invertible 1x1.");

        final SquareMatrix value = inv.get();

        assertEquals(1, value.n(), "Invalid size of inverse of 1x1 matrix.");
        assertEquals(1.0 / 17.5, value.get(0, 0), "Invalid entry in inverse of 1x1 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Inverse of 2x2")
    void testInverse2() {

        final SquareMatrix test = new SquareMatrix(17.5, -12.4, 6.5, 3.2);

        final Optional<SquareMatrix> inv = test.inverse();

        final boolean found = inv.isPresent();
        assertTrue(found, "Failed to take inverse of invertible 2x2.");

        final SquareMatrix value = inv.get();

        assertEquals(2, value.n(), "Invalid size of inverse of 2x2 matrix.");

        // Inverse from MATLAB
        assertEquals(0.023426061493411, value.get(0, 0), EPSILON, "Invalid entry in inverse of 2x2 matrix.");
        assertEquals(0.090775988286969, value.get(0, 1), EPSILON, "Invalid entry in inverse of 2x2 matrix.");
        assertEquals(-0.047584187408492, value.get(1, 0), EPSILON, "Invalid entry in inverse of 2x2 matrix.");
        assertEquals(0.128111273792094, value.get(1, 1), EPSILON, "Invalid entry in inverse of 2x2 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Inverse of 3x3")
    void testInverse3() {

        final SquareMatrix test = new SquareMatrix(17.5, -12.4, 9.1, 6.5, 3.2, -4.4, 1.9, -8.1, 15.4);

        final Optional<SquareMatrix> inv = test.inverse();

        final boolean found = inv.isPresent();
        assertTrue(found, "Failed to take inverse of invertible 3x3.");

        final SquareMatrix value = inv.get();

        assertEquals(3, value.n(), "Invalid size of inverse of 3x3 matrix.");

        // Inverse from MATLAB
        assertEquals(0.013000864500301, value.get(0, 0), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(0.111755965004418, value.get(0, 1), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(0.024247946692643, value.get(0, 2), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(-0.103377841913681, value.get(1, 0), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(0.240392084722936, value.get(1, 1), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(0.129770359363339, value.get(1, 2), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(-0.055978062470870, value.get(2, 0), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(0.112651919009570, value.get(2, 1), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
        assertEquals(0.130199273514742, value.get(2, 2), EPSILON, "Invalid entry in inverse of 3x3 matrix.");
    }

    /**
     * A test case.
     */
    @Test
    @DisplayName("Inverse of 4x4")
    void tesInverse4() {

        final SquareMatrix test1 = new SquareMatrix(
                0.0597058, 0.362764, 0.529353, 0.743410,
                0.0644189, 0.372940, 0.980050, 0.388748,
                0.8040580, 0.602346, 0.402664, 0.595672,
                0.5029760, 0.120310, 0.782990, 0.555785);

        final Optional<SquareMatrix> inv1 = test1.inverse();

        final boolean found1 = inv1.isPresent();
        assertTrue(found1, "Failed to take inverse of invertible 4x4.");

        final SquareMatrix value1 = inv1.get();

        assertEquals(4, value1.n(), "Invalid size of inverse of 4x4 matrix.");

        // Inverse from MATLAB
        assertEquals(-1.064590903036879, value1.get(0, 0), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(-0.505651670035206, value1.get(0, 1), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(0.762359542146653, value1.get(0, 2), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(0.960591533524495, value1.get(0, 3), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(-0.035010190929165, value1.get(1, 0), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(1.303148799422611, value1.get(1, 1), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(1.332340633426323, value1.get(1, 2), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(-2.292626776961622, value1.get(1, 3), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(-0.684218948209392, value1.get(2, 0), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(1.106304671219815, value1.get(2, 1), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(-0.383153837154997, value1.get(2, 2), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(0.552039893928002, value1.get(2, 3), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(1.934943088379566, value1.get(3, 0), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(-1.383046811607563, value1.get(3, 1), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(-0.438545177945221, value1.get(3, 2), EPSILON, "Invalid entry in inverse of 4x4 matrix.");
        assertEquals(0.648505670040663, value1.get(3, 3), EPSILON, "Invalid entry in inverse of 4x4 matrix.");

//        final SquareMatrix test2 = new SquareMatrix(
//                0.896248, 0.230188, 0.687667, 0.966587,
//                0.872015, 0.498319, 0.900730, 0.598575,
//                0.544349, 0.887507, 0.651091, 0.807526,
//                0.139408, 0.841727, 0.799754, 0.151275);
//
//        final Optional<SquareMatrix> inv2 = test2.inverse();
//
//        final boolean found2 = inv2.isPresent();
//        assertTrue(found2, "Failed to take inverse of invertible 4x4.");
//
//        final SquareMatrix test3 = new SquareMatrix(
//                6.71406, 4.485290, 7.47972, 4.0236,
//                2.60437, 8.002670, 9.81286, 1.58299,
//                2.70144, 0.424962, 9.87810, 4.64747,
//                3.88575, 8.418200, 7.03397, 8.30964);
//
//        final Optional<SquareMatrix> inv3 = test3.inverse();
//
//        final boolean found3 = inv3.isPresent();
//        assertTrue(found3, "Failed to take inverse of invertible 4x4.");
    }

    /**
     * A test case.
     */
//    @Test
//    @DisplayName("Inverse of 10x10")
//    void testInverse5() {
//
//        final SquareMatrix test = new SquareMatrix(
//                0.679907, 0.484257, 0.278555, 0.368329, 0.340532, 0.203652, 0.9462450, 0.2980480, 0.2384980, 0.9495700,
//                0.658759, 0.796218, 0.457899, 0.104089, 0.476250, 0.167054, 0.4381900, 0.9569980, 0.7140110, 0.8149000,
//                0.565297, 0.546658, 0.678315, 0.142485, 0.306676, 0.503536, 0.9168440, 0.6665350, 0.1443680, 0.3102970,
//                0.840636, 0.113913, 0.541133, 0.402995, 0.343223, 0.392272, 0.4913240, 0.5704140, 0.1174820, 0.4048290,
//                0.742019, 0.175687, 0.411406, 0.539525, 0.410085, 0.686180, 0.2139510, 0.5030780, 0.9936040, 0.7026920,
//                0.495777, 0.416156, 0.639746, 0.455169, 0.528963, 0.699501, 0.6784500, 0.0216322, 0.6007570, 0.3136930,
//                0.496401, 0.889872, 0.995780, 0.142381, 0.946278, 0.795033, 0.0296139, 0.4571320, 0.4784280, 0.3970320,
//                0.925874, 0.118995, 0.232438, 0.286745, 0.195767, 0.632609, 0.9598510, 0.9420150, 0.0744246, 0.2023470,
//                0.797212, 0.518764, 0.324527, 0.153161, 0.478742, 0.123190, 0.8362220, 0.7866780, 0.6889380, 0.4392460,
//                0.704471, 0.744936, 0.939563, 0.923221, 0.113476, 0.593990, 0.2248800, 0.6873640, 0.5404410, 0.0217125);
//
//        final Optional<SquareMatrix> inv = test.inverse();
//
//        final boolean found = inv.isPresent();
//        assertTrue(found, "Failed to take inverse of invertible 10x10.");
//    }

}
